import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
from torch.nn import init
from torchvision import models
from torch.autograd import Variable
import sys,os
import time
import netvlad

class Conv2D_BN(nn.Module):
    def __init__(self, in_channels, out_channels, **kwargs):
        super(Conv2D_BN, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, **kwargs)
        self.bn = nn.BatchNorm2d(out_channels)

    def forward(self, x):
        x = self.conv(x)
        x = self.bn(x)
        return x

class SELayer(nn.Module):
    def __init__(self, channel, reduction=16):
        super(SELayer, self).__init__()
        self.avg_pool = nn.AdaptiveAvgPool2d(1)
        self.fc = nn.Sequential(
                nn.Linear(channel, channel // reduction),
                nn.ReLU(inplace=True),
                nn.Linear(channel // reduction, channel),
                nn.Sigmoid()
        )
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.xavier_normal_(m.weight)
                

    def forward(self, x):
        b, c, _, _ = x.size()
        y = self.avg_pool(x).view(b, c)
        y = y.view(b,c)
        y = self.fc(y).view(b, c, 1, 1)
        return y  

class BasicBlock(nn.Module):
    def __init__(self, in_filters, out_filters, kernel_size=(3,1), stride=1, padding=(1,0), bias=True):
        super(BasicBlock, self).__init__()
        self.in_filters = in_filters
        self.out_filters = out_filters
        self.relu = nn.ReLU(inplace=True)
        self.conv1 = nn.Conv2d(in_filters, out_filters*2, kernel_size=kernel_size, stride=stride, padding=padding, bias=bias, dilation=1)
        self.conv2 = nn.Conv2d(out_filters, out_filters*2, kernel_size=kernel_size, stride=stride, padding=(padding[0]*2,0), bias=bias, dilation=2)
        self.conv3 = nn.Conv2d(out_filters, out_filters*2, kernel_size=kernel_size, stride=stride, padding=(padding[0]*4,0), bias=bias, dilation=4)
        self.identConv = nn.Conv2d(in_filters, out_filters, kernel_size=(1,1), stride=stride, bias=bias)

    def forward(self, x):
        identity = x
        out = self.conv1(x)
        out = self.relu(out)
        x = out[:,:self.out_filters,:,:] + out[:,self.out_filters:,:,:]   # B,C,H,W
        out = self.conv2(x)
        out = self.relu(out)
        x = out[:,:self.out_filters,:,:] + out[:,self.out_filters:,:,:]   # B,C,H,W
        out = self.conv3(x)
        out = self.relu(out)
        x = out[:,:self.out_filters,:,:] + out[:,self.out_filters:,:,:]   # B,C,H,W
        if identity.size()[1] != self.out_filters:
            identity = self.identConv(identity)
        x += identity
        return x

class CNN_residual_vlad_last(nn.Module):
    def __init__(self, num_classes):
        super(CNN_residual_vlad_last, self).__init__()
        self.num_clusters = 8
        self.relu = nn.ReLU(inplace=True)
        self.conv1_1 = BasicBlock(1, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_2 = BasicBlock(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_3 = BasicBlock(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_4 = BasicBlock(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.avg_pool1_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad1 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
       
        self.conv2_1 = BasicBlock(1, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_2 = BasicBlock(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_3 = BasicBlock(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_4 = BasicBlock(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.avg_pool2_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad2 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv3_1 = BasicBlock(1, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_2 = BasicBlock(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_3 = BasicBlock(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_4 = BasicBlock(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.avg_pool3_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad3 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv4_1 = BasicBlock(1, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_2 = BasicBlock(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_3 = BasicBlock(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_4 = BasicBlock(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.avg_pool4_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad4 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv5_1 = BasicBlock(1, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_2 = BasicBlock(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_3 = BasicBlock(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_4 = BasicBlock(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.avg_pool5_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad5 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv6_1 = BasicBlock(1, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_2 = BasicBlock(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_3 = BasicBlock(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_4 = BasicBlock(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.avg_pool6_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad6 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv7_1 = BasicBlock(1, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_2 = BasicBlock(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_3 = BasicBlock(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_4 = BasicBlock(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.avg_pool7_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad7 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv8_1 = BasicBlock(1, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_2 = BasicBlock(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_3 = BasicBlock(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_4 = BasicBlock(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.avg_pool8_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad8 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)

        self.vlad_final = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=256, alpha=1.0)
        self.fc1 = nn.Linear(2048, 1024)
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, 256)
        self.linear = nn.Linear(256, num_classes)
        
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.xavier_normal_(m.weight)
        
    def forward(self, x):
        x1 = self.conv1_1(x)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_1(x1)
        x1 = self.conv1_2(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_2(x1)
        x1 = self.conv1_3(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_3(x1)
        x1 = self.conv1_4(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_4(x1)  
        
        x2 = self.conv2_1(x)
        x2 = self.relu(x2)
        x2 = self.avg_pool2_1(x2)
        x2 = self.conv2_2(x2)        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_2(x2)
        x2 = self.conv2_3(x2)       
        x2 = self.relu(x2)
        x2 = self.avg_pool2_3(x2)
        x2 = self.conv2_4(x2)
        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_4(x2)    
        
        x3 = self.conv3_1(x)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_1(x3)
        x3 = self.conv3_2(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_2(x3)
        x3 = self.conv3_3(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_3(x3)
        x3 = self.conv3_4(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_4(x3)

        
        x4 = self.conv4_1(x)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_1(x4)
        x4 = self.conv4_2(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_2(x4)
        x4 = self.conv4_3(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_3(x4)
        x4 = self.conv4_4(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_4(x4)
        
        x5 = self.conv5_1(x)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_1(x5)
        x5 = self.conv5_2(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_2(x5)
        x5 = self.conv5_3(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_3(x5)
        x5 = self.conv5_4(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_4(x5)
        
        x6 = self.conv6_1(x)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_1(x6)
        x6 = self.conv6_2(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_2(x6)
        x6 = self.conv6_3(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_3(x6)
        x6 = self.conv6_4(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_4(x6)
        
        x7 = self.conv7_1(x)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_1(x7)
        x7 = self.conv7_2(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_2(x7)
        x7 = self.conv7_3(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_3(x7)
        x7 = self.conv7_4(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_4(x7)
        
        x8 = self.conv8_1(x)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_1(x8)
        x8 = self.conv8_2(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_2(x8)
        x8 = self.conv8_3(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_3(x8)
        x8 = self.conv8_4(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_4(x8)
        
        out = torch.cat((x1,x2,x3,x4,x5,x6,x7,x8),1)
        out = self.vlad_final(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.relu(out)
        out = self.fc3(out)
        out = self.relu(out)
        out = self.linear(out)
        return out

class CNN_residual_vlad_last_10_branch(nn.Module):
    def __init__(self, num_classes):
        super(CNN_residual_vlad_last_10_branch, self).__init__()
        self.num_clusters = 8

        self.relu = nn.ReLU(inplace=True)

        self.conv1_1 = BasicBlock(1, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_2 = BasicBlock(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_3 = BasicBlock(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_4 = BasicBlock(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.avg_pool1_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad1 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
       
        self.conv2_1 = BasicBlock(1, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_2 = BasicBlock(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_3 = BasicBlock(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_4 = BasicBlock(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.avg_pool2_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad2 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv3_1 = BasicBlock(1, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_2 = BasicBlock(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_3 = BasicBlock(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_4 = BasicBlock(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.avg_pool3_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad3 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv4_1 = BasicBlock(1, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_2 = BasicBlock(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_3 = BasicBlock(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_4 = BasicBlock(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.avg_pool4_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad4 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv5_1 = BasicBlock(1, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_2 = BasicBlock(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_3 = BasicBlock(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_4 = BasicBlock(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.avg_pool5_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad5 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv6_1 = BasicBlock(1, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_2 = BasicBlock(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_3 = BasicBlock(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_4 = BasicBlock(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.avg_pool6_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad6 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv7_1 = BasicBlock(1, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_2 = BasicBlock(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_3 = BasicBlock(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_4 = BasicBlock(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.avg_pool7_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad7 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv8_1 = BasicBlock(1, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_2 = BasicBlock(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_3 = BasicBlock(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_4 = BasicBlock(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.avg_pool8_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad8 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)

        self.conv9_1 = BasicBlock(1, 32, kernel_size=(21,1), stride=1, padding=(10,0), bias=True)
        self.conv9_2 = BasicBlock(32, 32, kernel_size=(21,1), stride=1, padding=(10,0), bias=True)
        self.conv9_3 = BasicBlock(32, 32, kernel_size=(21,1), stride=1, padding=(10,0), bias=True)
        self.conv9_4 = BasicBlock(32, 32, kernel_size=(21,1), stride=1, padding=(10,0), bias=True)
        self.avg_pool9_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool9_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool9_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool9_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad9 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv10_1 = BasicBlock(1, 32, kernel_size=(31,1), stride=1, padding=(15,0), bias=True)
        self.conv10_2 = BasicBlock(32, 32, kernel_size=(31,1), stride=1, padding=(15,0), bias=True)
        self.conv10_3 = BasicBlock(32, 32, kernel_size=(31,1), stride=1, padding=(15,0), bias=True)
        self.conv10_4 = BasicBlock(32, 32, kernel_size=(31,1), stride=1, padding=(15,0), bias=True)
        self.avg_pool10_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool10_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool10_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool10_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad10 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)

        self.vlad_final = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=320, alpha=1.0)
        self.fc1 = nn.Linear(2560, 1024)
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, 256)
        self.linear = nn.Linear(256, num_classes)
        
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.xavier_normal_(m.weight)
        
    def forward(self, x):
        x1 = self.conv1_1(x)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_1(x1)
        x1 = self.conv1_2(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_2(x1)
        x1 = self.conv1_3(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_3(x1)
        x1 = self.conv1_4(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_4(x1)  
        
        x2 = self.conv2_1(x)
        x2 = self.relu(x2)
        x2 = self.avg_pool2_1(x2)
        x2 = self.conv2_2(x2)        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_2(x2)
        x2 = self.conv2_3(x2)       
        x2 = self.relu(x2)
        x2 = self.avg_pool2_3(x2)
        x2 = self.conv2_4(x2)
        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_4(x2)    
        
        x3 = self.conv3_1(x)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_1(x3)
        x3 = self.conv3_2(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_2(x3)
        x3 = self.conv3_3(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_3(x3)
        x3 = self.conv3_4(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_4(x3)

        
        x4 = self.conv4_1(x)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_1(x4)
        x4 = self.conv4_2(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_2(x4)
        x4 = self.conv4_3(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_3(x4)
        x4 = self.conv4_4(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_4(x4)
        
        x5 = self.conv5_1(x)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_1(x5)
        x5 = self.conv5_2(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_2(x5)
        x5 = self.conv5_3(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_3(x5)
        x5 = self.conv5_4(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_4(x5)
        
        x6 = self.conv6_1(x)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_1(x6)
        x6 = self.conv6_2(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_2(x6)
        x6 = self.conv6_3(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_3(x6)
        x6 = self.conv6_4(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_4(x6)
        
        x7 = self.conv7_1(x)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_1(x7)
        x7 = self.conv7_2(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_2(x7)
        x7 = self.conv7_3(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_3(x7)
        x7 = self.conv7_4(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_4(x7)
        
        x8 = self.conv8_1(x)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_1(x8)
        x8 = self.conv8_2(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_2(x8)
        x8 = self.conv8_3(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_3(x8)
        x8 = self.conv8_4(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_4(x8)

        x9 = self.conv9_1(x)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_1(x9)
        x9 = self.conv9_2(x9)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_2(x9)
        x9 = self.conv9_3(x9)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_3(x9)
        x9 = self.conv9_4(x9)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_4(x9)
        
        x10 = self.conv10_1(x)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_1(x10)
        x10 = self.conv10_2(x10)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_2(x10)
        x10 = self.conv10_3(x10)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_3(x10)
        x10 = self.conv10_4(x10)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_4(x10)
        
        out = torch.cat((x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),1)
        out = self.vlad_final(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.relu(out)
        out = self.fc3(out)
        out = self.relu(out)
        out = self.linear(out)
        return out
        

class CNN_vlad_last(nn.Module):
    def __init__(self, num_classes):
        super(CNN_vlad_last, self).__init__()
        self.num_clusters = 8

        self.relu = nn.ReLU(inplace=True)

        self.conv1_1 = nn.Conv2d(1, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_2 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_3 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_4 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.avg_pool1_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad1 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
       
        self.conv2_1 = nn.Conv2d(1, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_2 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_3 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_4 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.avg_pool2_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad2 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv3_1 = nn.Conv2d(1, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_2 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_3 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_4 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.avg_pool3_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad3 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv4_1 = nn.Conv2d(1, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_2 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_3 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_4 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.avg_pool4_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad4 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv5_1 = nn.Conv2d(1, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_2 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_3 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_4 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.avg_pool5_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad5 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv6_1 = nn.Conv2d(1, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_2 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_3 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_4 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.avg_pool6_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad6 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv7_1 = nn.Conv2d(1, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_2 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_3 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_4 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.avg_pool7_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad7 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv8_1 = nn.Conv2d(1, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_2 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_3 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_4 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.avg_pool8_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad8 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)

        self.vlad_final = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=256, alpha=1.0)
        self.fc1 = nn.Linear(2048, 1024)
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, 256)
        self.linear = nn.Linear(256, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.xavier_normal_(m.weight)

    def forward(self, x):
        x1 = self.conv1_1(x)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_1(x1)
        x1 = self.conv1_2(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_2(x1)
        x1 = self.conv1_3(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_3(x1)
        x1 = self.conv1_4(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_4(x1)  
        
        x2 = self.conv2_1(x)
        x2 = self.relu(x2)
        x2 = self.avg_pool2_1(x2)
        x2 = self.conv2_2(x2)        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_2(x2)
        x2 = self.conv2_3(x2)       
        x2 = self.relu(x2)
        x2 = self.avg_pool2_3(x2)
        x2 = self.conv2_4(x2)
        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_4(x2)    
        
        x3 = self.conv3_1(x)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_1(x3)
        x3 = self.conv3_2(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_2(x3)
        x3 = self.conv3_3(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_3(x3)
        x3 = self.conv3_4(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_4(x3)

        
        x4 = self.conv4_1(x)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_1(x4)
        x4 = self.conv4_2(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_2(x4)
        x4 = self.conv4_3(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_3(x4)
        x4 = self.conv4_4(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_4(x4)
        
        x5 = self.conv5_1(x)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_1(x5)
        x5 = self.conv5_2(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_2(x5)
        x5 = self.conv5_3(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_3(x5)
        x5 = self.conv5_4(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_4(x5)
        
        x6 = self.conv6_1(x)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_1(x6)
        x6 = self.conv6_2(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_2(x6)
        x6 = self.conv6_3(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_3(x6)
        x6 = self.conv6_4(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_4(x6)
        
        x7 = self.conv7_1(x)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_1(x7)
        x7 = self.conv7_2(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_2(x7)
        x7 = self.conv7_3(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_3(x7)
        x7 = self.conv7_4(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_4(x7)
        
        x8 = self.conv8_1(x)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_1(x8)
        x8 = self.conv8_2(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_2(x8)
        x8 = self.conv8_3(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_3(x8)
        x8 = self.conv8_4(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_4(x8)
        
        out = torch.cat((x1,x2,x3,x4,x5,x6,x7,x8),1)
        out = self.vlad_final(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.relu(out)
        out = self.fc3(out)
        out = self.relu(out)
        out = self.linear(out)
        return out 


class CNN_all_vlad(nn.Module):
    def __init__(self, num_classes):
        super(CNN_all_vlad, self).__init__()
        self.num_clusters = 32

        self.relu = nn.ReLU(inplace=True)

        self.conv1_1 = nn.Conv2d(1, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_2 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_3 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_4 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.avg_pool1_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad1 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
       
        self.conv2_1 = nn.Conv2d(1, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_2 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_3 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_4 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.avg_pool2_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad2 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv3_1 = nn.Conv2d(1, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_2 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_3 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_4 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.avg_pool3_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad3 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv4_1 = nn.Conv2d(1, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_2 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_3 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_4 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.avg_pool4_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad4 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv5_1 = nn.Conv2d(1, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_2 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_3 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_4 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.avg_pool5_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad5 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv6_1 = nn.Conv2d(1, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_2 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_3 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_4 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.avg_pool6_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad6 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv7_1 = nn.Conv2d(1, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_2 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_3 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_4 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.avg_pool7_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad7 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv8_1 = nn.Conv2d(1, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_2 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_3 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_4 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.avg_pool8_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad8 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)

        self.vlad_final = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=256, alpha=1.0)
        self.fc1 = nn.Linear(8192, 1024)
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, 256)
        self.linear = nn.Linear(256, num_classes)
        
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.xavier_normal_(m.weight)
        
    def forward(self, x):
        x1 = self.conv1_1(x)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_1(x1)
        x1 = self.conv1_2(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_2(x1)
        x1 = self.conv1_3(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_3(x1)
        x1 = self.conv1_4(x1)
        x1 = self.relu(x1)
        #x1 = self.avg_pool1_4(x1) 
        x1 = self.vlad1(x1) 

        x2 = self.conv2_1(x)
        x2 = self.relu(x2)
        x2 = self.avg_pool2_1(x2)
        x2 = self.conv2_2(x2)        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_2(x2)
        x2 = self.conv2_3(x2)       
        x2 = self.relu(x2)
        x2 = self.avg_pool2_3(x2)
        x2 = self.conv2_4(x2)
        x2 = self.relu(x2)
        #x2 = self.avg_pool2_4(x2) 
        x2 = self.vlad2(x2)  
        
        x3 = self.conv3_1(x)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_1(x3)
        x3 = self.conv3_2(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_2(x3)
        x3 = self.conv3_3(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_3(x3)
        x3 = self.conv3_4(x3)
        x3 = self.relu(x3)
        #x3 = self.avg_pool3_4(x3)
        x3 = self.vlad3(x3) 
        
        x4 = self.conv4_1(x)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_1(x4)
        x4 = self.conv4_2(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_2(x4)
        x4 = self.conv4_3(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_3(x4)
        x4 = self.conv4_4(x4)
        x4 = self.relu(x4)
        #x4 = self.avg_pool4_4(x4)
        x4 = self.vlad4(x4) 
        
        x5 = self.conv5_1(x)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_1(x5)
        x5 = self.conv5_2(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_2(x5)
        x5 = self.conv5_3(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_3(x5)
        x5 = self.conv5_4(x5)
        x5 = self.relu(x5)
        #x5 = self.avg_pool5_4(x5)
        x5 = self.vlad5(x5) 
        
        x6 = self.conv6_1(x)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_1(x6)
        x6 = self.conv6_2(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_2(x6)
        x6 = self.conv6_3(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_3(x6)
        x6 = self.conv6_4(x6)
        x6 = self.relu(x6)
        #x6 = self.avg_pool6_4(x6)
        x6 = self.vlad6(x6) 
        
        x7 = self.conv7_1(x)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_1(x7)
        x7 = self.conv7_2(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_2(x7)
        x7 = self.conv7_3(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_3(x7)
        x7 = self.conv7_4(x7)
        x7 = self.relu(x7)
        #7 = self.avg_pool7_4(x7)
        x7 = self.vlad7(x7) 
        
        x8 = self.conv8_1(x)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_1(x8)
        x8 = self.conv8_2(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_2(x8)
        x8 = self.conv8_3(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_3(x8)
        x8 = self.conv8_4(x8)
        x8 = self.relu(x8)
        #x8 = self.avg_pool8_4(x8)
        x8 = self.vlad8(x8) 
        
        out = torch.cat((x1,x2,x3,x4,x5,x6,x7,x8),1)
        #out = self.vlad_final(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.relu(out)
        out = self.fc3(out)
        out = self.relu(out)
        out = self.linear(out)
        return out



class CNN_vlad_last_SE(nn.Module):
    def __init__(self, num_classes):
        super(CNN_vlad_last_SE, self).__init__()
        self.num_clusters = 8

        self.relu = nn.ReLU(inplace=True)

        self.conv1_1 = nn.Conv2d(1, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_2 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_3 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_4 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.avg_pool1_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad1 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        self.SE1_1 = SELayer(32)
        self.SE1_2 = SELayer(32)
        self.SE1_3 = SELayer(32)
        self.SE1_4 = SELayer(32)
       
        self.conv2_1 = nn.Conv2d(1, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_2 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_3 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_4 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.avg_pool2_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad2 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        self.SE2_1 = SELayer(32)
        self.SE2_2 = SELayer(32)
        self.SE2_3 = SELayer(32)
        self.SE2_4 = SELayer(32)
        
        self.conv3_1 = nn.Conv2d(1, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_2 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_3 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_4 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.avg_pool3_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad3 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        self.SE3_1 = SELayer(32)
        self.SE3_2 = SELayer(32)
        self.SE3_3 = SELayer(32)
        self.SE3_4 = SELayer(32)
        
        self.conv4_1 = nn.Conv2d(1, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_2 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_3 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_4 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.avg_pool4_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad4 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        self.SE4_1 = SELayer(32)
        self.SE4_2 = SELayer(32)
        self.SE4_3 = SELayer(32)
        self.SE4_4 = SELayer(32)
        
        self.conv5_1 = nn.Conv2d(1, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_2 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_3 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_4 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.avg_pool5_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad5 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        self.SE5_1 = SELayer(32)
        self.SE5_2 = SELayer(32)
        self.SE5_3 = SELayer(32)
        self.SE5_4 = SELayer(32)
        
        self.conv6_1 = nn.Conv2d(1, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_2 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_3 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_4 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.avg_pool6_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad6 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        self.SE6_1 = SELayer(32)
        self.SE6_2 = SELayer(32)
        self.SE6_3 = SELayer(32)
        self.SE6_4 = SELayer(32)
        
        self.conv7_1 = nn.Conv2d(1, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_2 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_3 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_4 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.avg_pool7_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad7 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        self.SE7_1 = SELayer(32)
        self.SE7_2 = SELayer(32)
        self.SE7_3 = SELayer(32)
        self.SE7_4 = SELayer(32)
        
        self.conv8_1 = nn.Conv2d(1, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_2 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_3 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_4 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.avg_pool8_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad8 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        self.SE8_1 = SELayer(32)
        self.SE8_2 = SELayer(32)
        self.SE8_3 = SELayer(32)
        self.SE8_4 = SELayer(32)

        self.vlad_final = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=256, alpha=1.0)
        self.fc1 = nn.Linear(2048, 1024)
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, 256)
        self.linear = nn.Linear(256, num_classes)
        
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.xavier_normal_(m.weight)
        
    def forward(self, x):
        x1 = self.conv1_1(x)
        x1 *= self.SE1_1(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_1(x1)
        x1 = self.conv1_2(x1)
        x1 *= self.SE1_2(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_2(x1)
        x1 = self.conv1_3(x1)
        x1 *= self.SE1_3(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_3(x1)
        x1 = self.conv1_4(x1)
        x1 *= self.SE1_4(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_4(x1)  
        
        x2 = self.conv2_1(x)
        x2 *= self.SE2_1(x2)
        x2 = self.relu(x2)
        x2 = self.avg_pool2_1(x2)
        x2 = self.conv2_2(x2)   
        x2 *= self.SE2_2(x2)     
        x2 = self.relu(x2)
        x2 = self.avg_pool2_2(x2)
        x2 = self.conv2_3(x2)    
        x2 *= self.SE2_3(x2)   
        x2 = self.relu(x2)
        x2 = self.avg_pool2_3(x2)
        x2 = self.conv2_4(x2)
        x2 *= self.SE2_4(x2)
        x2 = self.relu(x2)
        x2 = self.avg_pool2_4(x2)    
        
        x3 = self.conv3_1(x)
        x3 *= self.SE3_1(x3) 
        x3 = self.relu(x3)
        x3 = self.avg_pool3_1(x3)
        x3 = self.conv3_2(x3)
        x3 *= self.SE3_2(x3) 
        x3 = self.relu(x3)
        x3 = self.avg_pool3_2(x3)
        x3 = self.conv3_3(x3)
        x3 *= self.SE3_3(x3) 
        x3 = self.relu(x3)
        x3 = self.avg_pool3_3(x3)
        x3 = self.conv3_4(x3)
        x3 *= self.SE3_4(x3) 
        x3 = self.relu(x3)
        x3 = self.avg_pool3_4(x3)

        
        x4 = self.conv4_1(x)
        x4 *= self.SE4_1(x4) 
        x4 = self.relu(x4)
        x4 = self.avg_pool4_1(x4)
        x4 = self.conv4_2(x4)
        x4 *= self.SE4_2(x4) 
        x4 = self.relu(x4)
        x4 = self.avg_pool4_2(x4)
        x4 = self.conv4_3(x4)
        x4 *= self.SE4_3(x4) 
        x4 = self.relu(x4)
        x4 = self.avg_pool4_3(x4)
        x4 = self.conv4_4(x4)
        x4 *= self.SE4_4(x4) 
        x4 = self.relu(x4)
        x4 = self.avg_pool4_4(x4)
        
        x5 = self.conv5_1(x)
        x5 *= self.SE5_1(x5) 
        x5 = self.relu(x5)
        x5 = self.avg_pool5_1(x5)
        x5 = self.conv5_2(x5)
        x5 *= self.SE5_2(x5) 
        x5 = self.relu(x5)
        x5 = self.avg_pool5_2(x5)
        x5 = self.conv5_3(x5)
        x5 *= self.SE5_3(x5) 
        x5 = self.relu(x5)
        x5 = self.avg_pool5_3(x5)
        x5 = self.conv5_4(x5)
        x5 *= self.SE5_4(x5) 
        x5 = self.relu(x5)
        x5 = self.avg_pool5_4(x5)
        
        x6 = self.conv6_1(x)
        x6 *= self.SE6_1(x6) 
        x6 = self.relu(x6)
        x6 = self.avg_pool6_1(x6)
        x6 = self.conv6_2(x6)
        x6 *= self.SE6_2(x6) 
        x6 = self.relu(x6)
        x6 = self.avg_pool6_2(x6)
        x6 = self.conv6_3(x6)
        x6 *= self.SE6_3(x6) 
        x6 = self.relu(x6)
        x6 = self.avg_pool6_3(x6)
        x6 = self.conv6_4(x6)
        x6 *= self.SE6_4(x6) 
        x6 = self.relu(x6)
        x6 = self.avg_pool6_4(x6)
        
        x7 = self.conv7_1(x)
        x7 *= self.SE7_1(x7) 
        x7 = self.relu(x7)
        x7 = self.avg_pool7_1(x7)
        x7 = self.conv7_2(x7)
        x7 *= self.SE7_2(x7) 
        x7 = self.relu(x7)
        x7 = self.avg_pool7_2(x7)
        x7 = self.conv7_3(x7)
        x7 *= self.SE7_3(x7) 
        x7 = self.relu(x7)
        x7 = self.avg_pool7_3(x7)
        x7 = self.conv7_4(x7)
        x7 *= self.SE7_4(x7) 
        x7 = self.relu(x7)
        x7 = self.avg_pool7_4(x7)
        
        x8 = self.conv8_1(x)
        x8 *= self.SE8_1(x8) 
        x8 = self.relu(x8)
        x8 = self.avg_pool8_1(x8)
        x8 = self.conv8_2(x8)
        x8 *= self.SE8_2(x8) 
        x8 = self.relu(x8)
        x8 = self.avg_pool8_2(x8)
        x8 = self.conv8_3(x8)
        x8 *= self.SE8_3(x8) 
        x8 = self.relu(x8)
        x8 = self.avg_pool8_3(x8)
        x8 = self.conv8_4(x8)
        x8 *= self.SE8_4(x8) 
        x8 = self.relu(x8)
        x8 = self.avg_pool8_4(x8)
        
        out = torch.cat((x1,x2,x3,x4,x5,x6,x7,x8),1)
        out = self.vlad_final(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.relu(out)
        out = self.fc3(out)
        out = self.relu(out)
        out = self.linear(out)
        return out
      

#########   out = self.SE_final(out) --->>>  out *= self.SE_final(out)
class CNN_vlad_last_SE_V3(nn.Module): 
    def __init__(self, num_classes):
        super(CNN_vlad_last_SE_V3, self).__init__()
        self.num_clusters = 8

        self.relu = nn.ReLU(inplace=True)

        self.conv1_1 = nn.Conv2d(1, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_2 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_3 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_4 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.avg_pool1_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad1 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
       
        self.conv2_1 = nn.Conv2d(1, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_2 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_3 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_4 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.avg_pool2_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad2 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv3_1 = nn.Conv2d(1, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_2 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_3 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_4 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.avg_pool3_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad3 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv4_1 = nn.Conv2d(1, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_2 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_3 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_4 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.avg_pool4_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad4 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv5_1 = nn.Conv2d(1, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_2 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_3 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_4 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.avg_pool5_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad5 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv6_1 = nn.Conv2d(1, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_2 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_3 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_4 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.avg_pool6_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad6 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv7_1 = nn.Conv2d(1, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_2 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_3 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_4 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.avg_pool7_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad7 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv8_1 = nn.Conv2d(1, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_2 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_3 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_4 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.avg_pool8_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad8 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)

        self.vlad_final = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=256, alpha=1.0)
        self.SE_final = SELayer(256)
        self.fc1 = nn.Linear(2048, 1024)
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, 256)
        self.linear = nn.Linear(256, num_classes)
        
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.xavier_normal_(m.weight)
        
    def forward(self, x):
        x1 = self.conv1_1(x)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_1(x1)
        x1 = self.conv1_2(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_2(x1)
        x1 = self.conv1_3(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_3(x1)
        x1 = self.conv1_4(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_4(x1)  
        
        x2 = self.conv2_1(x)
        x2 = self.relu(x2)
        x2 = self.avg_pool2_1(x2)
        x2 = self.conv2_2(x2)        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_2(x2)
        x2 = self.conv2_3(x2)       
        x2 = self.relu(x2)
        x2 = self.avg_pool2_3(x2)
        x2 = self.conv2_4(x2)
        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_4(x2)    
        
        x3 = self.conv3_1(x)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_1(x3)
        x3 = self.conv3_2(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_2(x3)
        x3 = self.conv3_3(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_3(x3)
        x3 = self.conv3_4(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_4(x3)

        
        x4 = self.conv4_1(x)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_1(x4)
        x4 = self.conv4_2(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_2(x4)
        x4 = self.conv4_3(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_3(x4)
        x4 = self.conv4_4(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_4(x4)
        
        x5 = self.conv5_1(x)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_1(x5)
        x5 = self.conv5_2(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_2(x5)
        x5 = self.conv5_3(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_3(x5)
        x5 = self.conv5_4(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_4(x5)
        
        x6 = self.conv6_1(x)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_1(x6)
        x6 = self.conv6_2(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_2(x6)
        x6 = self.conv6_3(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_3(x6)
        x6 = self.conv6_4(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_4(x6)
        
        x7 = self.conv7_1(x)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_1(x7)
        x7 = self.conv7_2(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_2(x7)
        x7 = self.conv7_3(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_3(x7)
        x7 = self.conv7_4(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_4(x7)
        
        x8 = self.conv8_1(x)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_1(x8)
        x8 = self.conv8_2(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_2(x8)
        x8 = self.conv8_3(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_3(x8)
        x8 = self.conv8_4(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_4(x8)
        
        out = torch.cat((x1,x2,x3,x4,x5,x6,x7,x8),1)
        out *= self.SE_final(out)
        out = self.vlad_final(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.relu(out)
        out = self.fc3(out)
        out = self.relu(out)
        out = self.linear(out)
        return out

class CNN_moreconv_vlad_last(nn.Module):
    def __init__(self, num_classes):
        super(CNN_moreconv_vlad_last, self).__init__()
        self.num_clusters = 8

        self.relu = nn.ReLU(inplace=True)

        self.conv1_1 = nn.Conv2d(1, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_2 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_3 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.conv1_4 = nn.Conv2d(32, 32, kernel_size=(3,1), stride=1, padding=(1,0), bias=True)
        self.avg_pool1_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad1 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
       
        self.conv2_1 = nn.Conv2d(1, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_2 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_3 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.conv2_4 = nn.Conv2d(32, 32, kernel_size=(5,1), stride=1, padding=(2,0), bias=True)
        self.avg_pool2_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad2 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv3_1 = nn.Conv2d(1, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_2 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_3 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.conv3_4 = nn.Conv2d(32, 32, kernel_size=(7,1), stride=1, padding=(3,0), bias=True)
        self.avg_pool3_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad3 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv4_1 = nn.Conv2d(1, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_2 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_3 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.conv4_4 = nn.Conv2d(32, 32, kernel_size=(9,1), stride=1, padding=(4,0), bias=True)
        self.avg_pool4_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad4 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv5_1 = nn.Conv2d(1, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_2 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_3 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.conv5_4 = nn.Conv2d(32, 32, kernel_size=(11,1), stride=1, padding=(5,0), bias=True)
        self.avg_pool5_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad5 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv6_1 = nn.Conv2d(1, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_2 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_3 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.conv6_4 = nn.Conv2d(32, 32, kernel_size=(13,1), stride=1, padding=(6,0), bias=True)
        self.avg_pool6_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad6 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv7_1 = nn.Conv2d(1, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_2 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_3 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.conv7_4 = nn.Conv2d(32, 32, kernel_size=(15,1), stride=1, padding=(7,0), bias=True)
        self.avg_pool7_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad7 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv8_1 = nn.Conv2d(1, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_2 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_3 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.conv8_4 = nn.Conv2d(32, 32, kernel_size=(17,1), stride=1, padding=(8,0), bias=True)
        self.avg_pool8_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad8 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv9_1 = nn.Conv2d(1, 32, kernel_size=(21,1), stride=1, padding=(10,0), bias=True)
        self.conv9_2 = nn.Conv2d(32, 32, kernel_size=(21,1), stride=1, padding=(10,0), bias=True)
        self.conv9_3 = nn.Conv2d(32, 32, kernel_size=(21,1), stride=1, padding=(10,0), bias=True)
        self.conv9_4 = nn.Conv2d(32, 32, kernel_size=(21,1), stride=1, padding=(10,0), bias=True)
        self.avg_pool9_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool9_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool9_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool9_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad9 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv10_1 = nn.Conv2d(1, 32, kernel_size=(31,1), stride=1, padding=(15,0), bias=True)
        self.conv10_2 = nn.Conv2d(32, 32, kernel_size=(31,1), stride=1, padding=(15,0), bias=True)
        self.conv10_3 = nn.Conv2d(32, 32, kernel_size=(31,1), stride=1, padding=(15,0), bias=True)
        self.conv10_4 = nn.Conv2d(32, 32, kernel_size=(31,1), stride=1, padding=(15,0), bias=True)
        self.avg_pool10_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool10_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool10_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool10_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad10 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        

        self.vlad_final = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=320, alpha=1.0)
        self.fc1 = nn.Linear(2560, 1024)
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, 256)
        self.linear = nn.Linear(256, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.xavier_normal_(m.weight)

    def forward(self, x):
        x1 = self.conv1_1(x)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_1(x1)
        x1 = self.conv1_2(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_2(x1)
        x1 = self.conv1_3(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_3(x1)
        x1 = self.conv1_4(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_4(x1)  
        
        x2 = self.conv2_1(x)
        x2 = self.relu(x2)
        x2 = self.avg_pool2_1(x2)
        x2 = self.conv2_2(x2)        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_2(x2)
        x2 = self.conv2_3(x2)       
        x2 = self.relu(x2)
        x2 = self.avg_pool2_3(x2)
        x2 = self.conv2_4(x2)
        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_4(x2)    
        
        x3 = self.conv3_1(x)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_1(x3)
        x3 = self.conv3_2(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_2(x3)
        x3 = self.conv3_3(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_3(x3)
        x3 = self.conv3_4(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_4(x3)

        
        x4 = self.conv4_1(x)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_1(x4)
        x4 = self.conv4_2(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_2(x4)
        x4 = self.conv4_3(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_3(x4)
        x4 = self.conv4_4(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_4(x4)
        
        x5 = self.conv5_1(x)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_1(x5)
        x5 = self.conv5_2(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_2(x5)
        x5 = self.conv5_3(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_3(x5)
        x5 = self.conv5_4(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_4(x5)
        
        x6 = self.conv6_1(x)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_1(x6)
        x6 = self.conv6_2(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_2(x6)
        x6 = self.conv6_3(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_3(x6)
        x6 = self.conv6_4(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_4(x6)
        
        x7 = self.conv7_1(x)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_1(x7)
        x7 = self.conv7_2(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_2(x7)
        x7 = self.conv7_3(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_3(x7)
        x7 = self.conv7_4(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_4(x7)
        
        x8 = self.conv8_1(x)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_1(x8)
        x8 = self.conv8_2(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_2(x8)
        x8 = self.conv8_3(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_3(x8)
        x8 = self.conv8_4(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_4(x8)
        
        x9 = self.conv9_1(x)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_1(x9)
        x9 = self.conv9_2(x9)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_2(x9)
        x9 = self.conv9_3(x9)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_3(x9)
        x9 = self.conv9_4(x9)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_4(x9)
        
        x10 = self.conv10_1(x)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_1(x10)
        x10 = self.conv10_2(x10)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_2(x10)
        x10 = self.conv10_3(x10)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_3(x10)
        x10 = self.conv10_4(x10)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_4(x10)
        
        out = torch.cat((x1,x2,x3,x4,x5,x6,x7,x8,x9,x10),1)
        out = self.vlad_final(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.relu(out)
        out = self.fc3(out)
        out = self.relu(out)
        out = self.linear(out)
        return out 

class CNN_vlad_last_12_branch(nn.Module):
    def __init__(self, kernel_size_list, num_classes):
        super(CNN_vlad_last_12_branch, self).__init__()
        self.num_clusters = 8
        self.kernel_size_list = kernel_size_list
        self.relu = nn.ReLU(inplace=True)

        self.conv1_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[0],1), stride=1, padding=((self.kernel_size_list[0]-1)//2,0), bias=True)
        self.conv1_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[0],1), stride=1, padding=((self.kernel_size_list[0]-1)//2,0), bias=True)
        self.conv1_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[0],1), stride=1, padding=((self.kernel_size_list[0]-1)//2,0), bias=True)
        self.conv1_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[0],1), stride=1, padding=((self.kernel_size_list[0]-1)//2,0), bias=True)
        self.avg_pool1_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool1_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad1 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
       
        self.conv2_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[1],1), stride=1, padding=((self.kernel_size_list[1]-1)//2,0), bias=True)
        self.conv2_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[1],1), stride=1, padding=((self.kernel_size_list[1]-1)//2,0), bias=True)
        self.conv2_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[1],1), stride=1, padding=((self.kernel_size_list[1]-1)//2,0), bias=True)
        self.conv2_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[1],1), stride=1, padding=((self.kernel_size_list[1]-1)//2,0), bias=True)
        self.avg_pool2_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool2_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad2 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv3_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[2],1), stride=1, padding=((self.kernel_size_list[2]-1)//2,0), bias=True)
        self.conv3_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[2],1), stride=1, padding=((self.kernel_size_list[2]-1)//2,0), bias=True)
        self.conv3_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[2],1), stride=1, padding=((self.kernel_size_list[2]-1)//2,0), bias=True)
        self.conv3_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[2],1), stride=1, padding=((self.kernel_size_list[2]-1)//2,0), bias=True)
        self.avg_pool3_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool3_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad3 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv4_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[3],1), stride=1, padding=((self.kernel_size_list[3]-1)//2,0), bias=True)
        self.conv4_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[3],1), stride=1, padding=((self.kernel_size_list[3]-1)//2,0), bias=True)
        self.conv4_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[3],1), stride=1, padding=((self.kernel_size_list[3]-1)//2,0), bias=True)
        self.conv4_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[3],1), stride=1, padding=((self.kernel_size_list[3]-1)//2,0), bias=True)
        self.avg_pool4_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool4_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad4 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv5_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[4],1), stride=1, padding=((self.kernel_size_list[4]-1)//2,0), bias=True)
        self.conv5_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[4],1), stride=1, padding=((self.kernel_size_list[4]-1)//2,0), bias=True)
        self.conv5_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[4],1), stride=1, padding=((self.kernel_size_list[4]-1)//2,0), bias=True)
        self.conv5_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[4],1), stride=1, padding=((self.kernel_size_list[4]-1)//2,0), bias=True)
        self.avg_pool5_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool5_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad5 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv6_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[5],1), stride=1, padding=((self.kernel_size_list[5]-1)//2,0), bias=True)
        self.conv6_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[5],1), stride=1, padding=((self.kernel_size_list[5]-1)//2,0), bias=True)
        self.conv6_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[5],1), stride=1, padding=((self.kernel_size_list[5]-1)//2,0), bias=True)
        self.conv6_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[5],1), stride=1, padding=((self.kernel_size_list[5]-1)//2,0), bias=True)
        self.avg_pool6_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool6_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad6 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv7_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[6],1), stride=1, padding=((self.kernel_size_list[6]-1)//2,0), bias=True)
        self.conv7_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[6],1), stride=1, padding=((self.kernel_size_list[6]-1)//2,0), bias=True)
        self.conv7_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[6],1), stride=1, padding=((self.kernel_size_list[6]-1)//2,0), bias=True)
        self.conv7_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[6],1), stride=1, padding=((self.kernel_size_list[6]-1)//2,0), bias=True)
        self.avg_pool7_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool7_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad7 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv8_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[7],1), stride=1, padding=((self.kernel_size_list[7]-1)//2,0), bias=True)
        self.conv8_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[7],1), stride=1, padding=((self.kernel_size_list[7]-1)//2,0), bias=True)
        self.conv8_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[7],1), stride=1, padding=((self.kernel_size_list[7]-1)//2,0), bias=True)
        self.conv8_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[7],1), stride=1, padding=((self.kernel_size_list[7]-1)//2,0), bias=True)
        self.avg_pool8_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool8_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad8 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv9_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[8],1), stride=1, padding=((self.kernel_size_list[8]-1)//2,0), bias=True)
        self.conv9_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[8],1), stride=1, padding=((self.kernel_size_list[8]-1)//2,0), bias=True)
        self.conv9_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[8],1), stride=1, padding=((self.kernel_size_list[8]-1)//2,0), bias=True)
        self.conv9_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[8],1), stride=1, padding=((self.kernel_size_list[8]-1)//2,0), bias=True)
        self.avg_pool9_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool9_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool9_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool9_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad9 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv10_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[9],1), stride=1, padding=((self.kernel_size_list[9]-1)//2,0), bias=True)
        self.conv10_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[9],1), stride=1, padding=((self.kernel_size_list[9]-1)//2,0), bias=True)
        self.conv10_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[9],1), stride=1, padding=((self.kernel_size_list[9]-1)//2,0), bias=True)
        self.conv10_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[9],1), stride=1, padding=((self.kernel_size_list[9]-1)//2,0), bias=True)
        self.avg_pool10_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool10_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool10_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool10_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad10 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv11_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[10],1), stride=1, padding=((self.kernel_size_list[10]-1)//2,0), bias=True)
        self.conv11_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[10],1), stride=1, padding=((self.kernel_size_list[10]-1)//2,0), bias=True)
        self.conv11_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[10],1), stride=1, padding=((self.kernel_size_list[10]-1)//2,0), bias=True)
        self.conv11_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[10],1), stride=1, padding=((self.kernel_size_list[10]-1)//2,0), bias=True)
        self.avg_pool11_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool11_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool11_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool11_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad11 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.conv12_1 = nn.Conv2d(1, 32, kernel_size=(self.kernel_size_list[11],1), stride=1, padding=((self.kernel_size_list[11]-1)//2,0), bias=True)
        self.conv12_2 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[11],1), stride=1, padding=((self.kernel_size_list[11]-1)//2,0), bias=True)
        self.conv12_3 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[11],1), stride=1, padding=((self.kernel_size_list[11]-1)//2,0), bias=True)
        self.conv12_4 = nn.Conv2d(32, 32, kernel_size=(self.kernel_size_list[11],1), stride=1, padding=((self.kernel_size_list[11]-1)//2,0), bias=True)
        self.avg_pool12_1= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool12_2= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool12_3= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.avg_pool12_4= nn.AvgPool2d((3, 1), stride=(3, 1))
        self.vlad12 = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=32, alpha=1.0)
        
        self.vlad_final = netvlad.NetVLAD(num_clusters=self.num_clusters, dim=384, alpha=1.0)
        self.fc1 = nn.Linear(3072, 1024)
        self.fc2 = nn.Linear(1024, 512)
        self.fc3 = nn.Linear(512, 256)
        self.linear = nn.Linear(256, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight)
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)
            elif isinstance(m, nn.Linear):
                init.xavier_normal_(m.weight)

    def forward(self, x):
        x1 = self.conv1_1(x)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_1(x1)
        x1 = self.conv1_2(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_2(x1)
        x1 = self.conv1_3(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_3(x1)
        x1 = self.conv1_4(x1)
        x1 = self.relu(x1)
        x1 = self.avg_pool1_4(x1)  
        
        x2 = self.conv2_1(x)
        x2 = self.relu(x2)
        x2 = self.avg_pool2_1(x2)
        x2 = self.conv2_2(x2)        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_2(x2)
        x2 = self.conv2_3(x2)       
        x2 = self.relu(x2)
        x2 = self.avg_pool2_3(x2)
        x2 = self.conv2_4(x2)
        
        x2 = self.relu(x2)
        x2 = self.avg_pool2_4(x2)    
        
        x3 = self.conv3_1(x)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_1(x3)
        x3 = self.conv3_2(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_2(x3)
        x3 = self.conv3_3(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_3(x3)
        x3 = self.conv3_4(x3)
        x3 = self.relu(x3)
        x3 = self.avg_pool3_4(x3)

        
        x4 = self.conv4_1(x)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_1(x4)
        x4 = self.conv4_2(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_2(x4)
        x4 = self.conv4_3(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_3(x4)
        x4 = self.conv4_4(x4)
        x4 = self.relu(x4)
        x4 = self.avg_pool4_4(x4)
        
        x5 = self.conv5_1(x)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_1(x5)
        x5 = self.conv5_2(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_2(x5)
        x5 = self.conv5_3(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_3(x5)
        x5 = self.conv5_4(x5)
        x5 = self.relu(x5)
        x5 = self.avg_pool5_4(x5)
        
        x6 = self.conv6_1(x)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_1(x6)
        x6 = self.conv6_2(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_2(x6)
        x6 = self.conv6_3(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_3(x6)
        x6 = self.conv6_4(x6)
        x6 = self.relu(x6)
        x6 = self.avg_pool6_4(x6)
        
        x7 = self.conv7_1(x)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_1(x7)
        x7 = self.conv7_2(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_2(x7)
        x7 = self.conv7_3(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_3(x7)
        x7 = self.conv7_4(x7)
        x7 = self.relu(x7)
        x7 = self.avg_pool7_4(x7)
        
        x8 = self.conv8_1(x)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_1(x8)
        x8 = self.conv8_2(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_2(x8)
        x8 = self.conv8_3(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_3(x8)
        x8 = self.conv8_4(x8)
        x8 = self.relu(x8)
        x8 = self.avg_pool8_4(x8)
        
        x9 = self.conv9_1(x)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_1(x9)
        x9 = self.conv9_2(x9)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_2(x9)
        x9 = self.conv9_3(x9)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_3(x9)
        x9 = self.conv9_4(x9)
        x9 = self.relu(x9)
        x9 = self.avg_pool9_4(x9)
        
        x10 = self.conv10_1(x)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_1(x10)
        x10 = self.conv10_2(x10)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_2(x10)
        x10 = self.conv10_3(x10)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_3(x10)
        x10 = self.conv10_4(x10)
        x10 = self.relu(x10)
        x10 = self.avg_pool10_4(x10)
        
        x11 = self.conv11_1(x)
        x11 = self.relu(x11)
        x11 = self.avg_pool11_1(x11)
        x11 = self.conv11_2(x11)
        x11 = self.relu(x11)
        x11 = self.avg_pool11_2(x11)
        x11 = self.conv11_3(x11)
        x11 = self.relu(x11)
        x11 = self.avg_pool11_3(x11)
        x11 = self.conv11_4(x11)
        x11 = self.relu(x11)
        x11 = self.avg_pool11_4(x11)
        
        x12 = self.conv12_1(x)
        x12 = self.relu(x12)
        x12 = self.avg_pool12_1(x12)
        x12 = self.conv12_2(x12)
        x12 = self.relu(x12)
        x12 = self.avg_pool12_2(x12)
        x12 = self.conv12_3(x12)
        x12 = self.relu(x12)
        x12 = self.avg_pool12_3(x12)
        x12 = self.conv12_4(x12)
        x12 = self.relu(x12)
        x12 = self.avg_pool12_4(x12)
        
        out = torch.cat((x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12),1)
        out = self.vlad_final(out)
        out = out.view(out.size(0), -1)
        out = self.fc1(out)
        out = self.relu(out)
        out = self.fc2(out)
        out = self.relu(out)
        out = self.fc3(out)
        out = self.relu(out)
        out = self.linear(out)
        return out 
        
if __name__ == '__main__':
    os.environ["CUDA_VISIBLE_DEVICES"] = "0"
    timer = time.time()
    #net = convnet_baseline(3)
    #net = CNN_baseline_featEng(3)
    net = CNN_vlad_last(3)
    #timer = time.time()
    y = net(Variable(torch.randn(4,1,2600,1)))
    print(y.size())
    #print(y2.size())
    timer = time.time() - timer
    print('time comsuming(sec): ',timer)  # cuda:20s, w/o cuda:80s